#!/usr/bin/python3

import glob
import os
import re
import subprocess
import sys

from launchpadlib.launchpad import Launchpad

label = sys.argv[1]

lp = Launchpad.login_with('find-seeded-ftbfs', 'production', version='devel')

rebuild_archive = lp.load('/ubuntu/+archive/' + label)

spph = next(iter(rebuild_archive.getPublishedSources()))

series_name = spph.distro_series.name

germinate_dir = f'germinate-{series_name}'

if not os.path.isdir(germinate_dir):
    os.mkdir(f'germinate-{series_name}')
    germinate_cmd = [
        'germinate',
        '-d', series_name,
        '-S', 'https://git.launchpad.net/~ubuntu-core-dev/ubuntu-seeds/+git/',
        '-c', 'main',
        '-s', f'ubuntu.{series_name}',
        '-a', 'amd64',
        '--no-rdepends',
        '--vcs', 'git',
        ]
    subprocess.run(
        germinate_cmd,
        check=True,
        cwd=germinate_dir)

SUCCESS_STATE = 'Successfully built'
PROGRESS_STATES = ['Needs building', 'Uploading build', 'Currently building']


def check_pkg_built(source_package_name):
    spphs = rebuild_archive.getPublishedSources(
        source_name=source_package_name, status="Published", exact_match=True)
    for spph in spphs:
        for build in spph.getBuilds():
            if build.buildstate != SUCCESS_STATE:
                if build.buildstate not in PROGRESS_STATES:
                    print(build.web_link)
                return build.buildstate
    return SUCCESS_STATE


ftbfs = []

seed_files = []
if sys.argv[2:]:
    for seed_name in sys.argv[2:]:
        seed_files.append(f'{germinate_dir}/{seed_name}.sources')
else:
    with open(f'{germinate_dir}/structure') as structure:
        for line in structure:
            print(line, ':' in line)
            if ':' in line:
                seed_name = line.split(':')[0]
                seed_files.append(f'{germinate_dir}/{seed_name}.sources')


print(seed_files)

waiting = []

pkgs = set()

for seed_file in seed_files:
    with open(seed_file) as seed:
        for line in seed:
            if re.match('^[a-z0-9]', line):
                pkg = line.split()[0]
                pkgs.add(pkg)

for pkg in sorted(pkgs):
    print(f'checking {pkg}... ', end='', flush=True)
    state = check_pkg_built(pkg)
    if state == SUCCESS_STATE:
        print('ok')
    elif state in PROGRESS_STATES:
        print("waiting")
        waiting.append(pkg)
    else:
        print("FAIL", state)
        ftbfs.append((state, pkg))

if waiting:
    print()
    print("waiting on", len(waiting), "packages")

if ftbfs:
    print()
    print("FAILURES")
    print()
    for state, pkg in ftbfs:
        print(pkg, state)
